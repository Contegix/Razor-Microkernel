There are three files contained in this project at this time. The first file
(iso-build-files.tar.gz) contains all of the files that are needed to build a
new Microkernel ISO (i.e. a Microkernel ISO corresponding to the one that we
are using in the Razor project). Unpacking this file will result in a directory
structure that looks something like the following being created in the current
working directory:

                          microcore-current-files
                                   |
                                   |
                     -----------------------------
                     |             |             |
                     |             |             |
                   newiso       extract         tmp

In this directory structure, the "extract" subdirectory contains all of the files
that were extracted from the microcore.gz file that is contained in the original
microcore-current.iso file from the Tiny Core Linux distribution.  The "tmp" directory,
on the other hand, contains all of the files that were used to create the customized
version of this same microcore.gz file (the customized version that appears in the
Microkernel ISO that we are using in Razor). This microcore.gz file was then used to
replace the file that appears in the boot subdirectory of "newiso" subdirectory
(which originally contained a copy of the contents of the microcore-current.iso file).
As such, the "newiso" subdirectory contains all of the contents of the ISO file that
we are using in the Razor project.

If the iso-build-files.tar.gz tarfile is extracted, the microcore-current-files
subdirectory contains an another file (in addition to the three directories mentioned
above).  That file is a shell script (rebuild_iso.sh) that can be used to build a new
ISO after changes are made to the contents of the "tmp" or "newiso" directories.  The
shell script will run all of the appropriate commands (there are about 8 of them) to
build the new microcore.gz file, place it in the appropriate location in the newiso
directory, and then build the new ISO from the contents of that directory. When the
script finishes, a new ISO will be built that can be used to boot machines.

The current Microkernel (rz_mk_dev-image.0.0.0.1.iso) includes the following extensions
to the "stock" Micro Core Linux distro:

        1. Ruby (v1.8.7)
        2. Bash
        3. OpenSSH (v5.8p1)
        4. Facter (v1.6.4)
        5. MCollective (v1.2.1)
        6. RubyGems (v1.8.15)
        7. Stomp RubyGem (v1.2.0)

When this ISO is used as the boot image for a node, scripts will automatically
be run to start an SSH daemon and an MCollective agent post-boot.  Once the
MCollective agent is started, the node will be controllable from the MCollective
Control Node.  At this time, the MCollective agent's configuration (which appears
in /usr/local/etc/mcollective in the Microkernel's filesystem) is "hard-coded"
into the ISO, as is the public/private host key pair that is used by the SSH
daemon.  Eventually, the MCollective agent configuration will be obtained from
a Node.js instance, but that instance doesn't exist yet, so for testing purposes
we'll continue to use the "fixed" MCollective configuration (at least for now).
The "fixed" public/private host key pair (which is the same for all Microkernel
instances in the current ISO) is less of an issue, because this service will
be pulled out of any ISO that is rolled out into a production environment
(to prevent command-line access to the nodes when they are being managed
by the Microkernel).

In addition to the extensions that were mentioned previously, we have also
made the following changes to the "stock" Micro Core Linux distro in building
out the current version of the Razor Microkernel (v0.0.0.1):

        1. We have reduced the boot prompt timeout (defined in the
           /boot/isolinux/isolinux.cfg file in the ISO itself) to
           approximately 10 seconds (the original value was 30 seconds)
        2. We have modified the /opt/bootlocal.sh script that is include
           in the microcore.gz file used by the Microkernel (which can be
           found in the ISO's /boot directory) so that it automatically
           starts the SSH daemon on boot and so that it starts the
           MCollective agent automatically after the network is available
           (so that the MCollective agent can establish a connection to
           the MCollective Control Node).

All of these changes (and the procedure that was followed to make them)
can be found in the following pages:

        1. Remastering the Microkernel ISO:

        http://dcade.lss.emc.com/confluence/display/ASI/Remastering+the+Microkernel+ISO

        2. Reconfiguring the Microkernel to include the "extras" described above:

        http://dcade.lss.emc.com/confluence/display/ASI/Microkernel+Configuration